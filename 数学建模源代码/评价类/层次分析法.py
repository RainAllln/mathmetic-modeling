import numpy as np
# 应用AHP解决问题时，先将问题层次化，条理化，构造出有层次的模型
# 基本步骤：
# 1.建立递阶层次结构模型
# 2.构造出各层次的判断矩阵
# 3.一致性检验
# 4.求权重后进行评价

# 层次分为三类
# 最高层只有一个元素，一般是问题的预定目标和理想结果，也称为目标层；
# 中间层包含实现目标的中间环节，包括子准则，因此也称为准则层；
# 最底层包含实现目标所需要的各种措施和决策方案，也称为措施层；
# 例子：目标层：微博之星，准则层：粉丝数，颜值，作品质量，作品数量，方案层：A,B,C三个明星选择一个作为微博之星

# 建立判断矩阵,对指标重要性两两比较，a(ij)表示第i个指标对第j各指标的重要程度，标度从1开始，表示两个指标同样重要，直到8表示指标i比j极端重要

A = np.array([[1,2,3,5],[1/2,1,1/2,2],[1/3,2,1,2],[1/5,1/2,1/2,1]])
n = A.shape[0] #获取A的行，1是获取列

# 一致性检验,如果每个元素>0且a(ij)*a(ji)=1,那么该矩阵是正互反矩阵，如果a(ij)=a(ik)*a(kj)且各行（各列）成倍数关系，则该矩阵是一致矩阵
# 引理1：A为n阶方阵，且A的秩为1（其他行成倍数），则A的特征值tr(A)=n,其他特征值为0，且对应特征向量为k[1/a(11),1/a(12),...,1/a(1n)]^T
# 引理2：n阶正互反矩阵A为一致矩阵时当且仅当最大特征值λ(max)=n,当非一致时，一定有λ(max)>n,且越不一致越大
# 计算一致性指标CI=(λ(max)-n)/(n-1),查表得到一致性指标RI,计算一致性比例CR=CI/RI=0为一致矩阵，<0.1一致，>=0.1不一致
# 判断矩阵不一致需要修改矩阵后重新一致性检验

eig_val, eig_vec = np.linalg.eig(A) #eig_val是特征值，eig_vec是特征向量
Max_eig = max(eig_val)
CI = (Max_eig - n) / (n-1)
RI = [0,0.0001,0.52,0.89,1.12,1.26,1.36,1.41,1.46,1.49,1.52,1.54,1.56,1.58,1.59]
CR = CI / RI[n-1]

print("一致性指标CI=",CI)
print("一致性比例CR=",CR)

if CR < 0.1:
    print("A一致性可接受")
else:
    print("A一致性不可接受")

# 求权重
# 算术平均法：将判断矩阵按列归一化（每一个元素除以所在列的和），将归一化的各列相加（按行求和），将得到的向量每个元素除以n得到权重向量

ASum0 = np.sum(A,axis=0) #axis=0表示按列计算总和，=1表示按行
n = A.shape[0]
Stand_A = A/ASum0 #归一化
ASum1 = np.sum(Stand_A,axis=1)
Weight1 = ASum1 / n
print("Weight1=",Weight1)

# 几何平均法：将判断矩阵的元素按行相乘得到新列向量，每个分量开n次方，最后归一化得到权重向量

prod_A = np.prod(A,axis=1) #按行相乘
prod_n_A = np.power(prod_A,1/n) #power(a,b)将a数组中的每个元素进行b指数的幂运算
Weight2 = prod_n_A / np.sum(prod_n_A)
print("Weight2=",Weight2)

# 特征值法：求出A最大特征值以及特征向量，特征向量归一化得到权重向量

max_index = np.argmax(eig_val) #argmax函数用于返回数组中最大值的索引
max_vector = eig_vec[:, max_index] #对应特征向量
Weight3 = max_vector / np.sum(max_vector)
print("Weight3=",Weight3)
